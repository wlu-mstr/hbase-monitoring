/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.microstrategy.database.hbase.view;

import com.microstrategy.database.hbase.control.FetchAdmindataRunnable;
import com.microstrategy.database.hbase.control.FetchDataWrapper;
import com.microstrategy.database.hbase.model.RegionOfTableOnEachRSServer;
import com.microstrategy.database.hbase.model.RegionServerStatus;
import com.microstrategy.database.hbase.model.filtering.Filter;
import com.microstrategy.database.hbase.view.charts.BackendDataFetchStatusChart;
import com.microstrategy.database.hbase.view.charts.RegionOfTableOnEachRSServerCharts;
import com.microstrategy.database.hbase.view.charts.RegionServerStatusCharts;
import com.microstrategy.database.hbase.view.charts.timeseries.DynamicTimeseriesChartPanel;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartPanel;

/**
 *
 * @author wlu
 */
public class HBaseMonitoringApp extends javax.swing.JFrame {

    private final int onesec = 1000;

    /**
     * Creates new form HBaseMonitoring
     */
    public HBaseMonitoringApp() {
        initComponents();
        // start a timer task to check chart refresh status one a sec
        Timer gTimer = new Timer();
        gTimer.schedule(new ChartRefreshProgressTimerTask(), onesec, onesec);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        cluster = new javax.swing.JButton();
        rsStatus = new javax.swing.JButton();
        tables = new javax.swing.JButton();
        regions = new javax.swing.JButton();
        setFilter = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        pChartpanel = new javax.swing.JPanel();
        settingpanel = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        mChartRefreshProgressBar = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        RefreshChartPeriodText = new javax.swing.JTextField();
        secLabel1 = new javax.swing.JLabel();
        RefreshPeriodButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        RefreshDataPeriodText = new javax.swing.JTextField();
        secLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        start_get_data2DB = new javax.swing.JToggleButton();
        ZKHostsTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ZKPortTextField = new javax.swing.JTextField();
        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel5 = new javax.swing.JLabel();
        ClusterNameTextField = new javax.swing.JTextField();
        pBackendThreadStatus = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HBaseMonitoring");

        jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        cluster.setText("Cluster");
        cluster.setFocusable(false);
        cluster.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cluster.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cluster.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clusterActionPerformed(evt);
            }
        });
        jToolBar1.add(cluster);

        rsStatus.setText("RsStat");
        rsStatus.setFocusable(false);
        rsStatus.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rsStatus.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rsStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rsStatusActionPerformed(evt);
            }
        });
        jToolBar1.add(rsStatus);

        tables.setText("Tables");
        tables.setFocusable(false);
        tables.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tables.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(tables);

        regions.setText("Regions");
        regions.setFocusable(false);
        regions.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        regions.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(regions);

        setFilter.setText("Filter");
        setFilter.setFocusable(false);
        setFilter.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        setFilter.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        setFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setFilterActionPerformed(evt);
            }
        });
        jToolBar1.add(setFilter);

        jButton1.setText("Diagnose");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(510);
        jSplitPane1.setResizeWeight(0.7);
        jSplitPane1.setOneTouchExpandable(true);

        pChartpanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Chart"));
        pChartpanel.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setLeftComponent(pChartpanel);

        settingpanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Setting"));
        settingpanel.setLayout(new java.awt.BorderLayout());

        jSplitPane2.setDividerLocation(300);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setResizeWeight(0.5);

        jLabel1.setText("Chart refresh:");

        RefreshChartPeriodText.setText("30");

        secLabel1.setText("/s");

        RefreshPeriodButton.setText("reset");

        jLabel2.setText("Data refresh: ");

        RefreshDataPeriodText.setText("30");

        secLabel2.setText("/s");

        jButton2.setText("reset");

        start_get_data2DB.setText("Start Get Data");
        start_get_data2DB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                start_get_data2DBActionPerformed(evt);
            }
        });

        ZKHostsTextField.setText("adcaj10.machine.wisdom.com");

        jLabel3.setText("Zookeeper:");

        jLabel4.setText("Port:");

        ZKPortTextField.setText("2181");

        jToggleButton1.setText("Refresh");

        jLabel5.setText("Cluster:");

        ClusterNameTextField.setText("adcaj10.machine.wisdom.com");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(RefreshChartPeriodText, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(secLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RefreshPeriodButton)
                .addGap(4, 4, 4))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RefreshDataPeriodText, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(secLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2))
            .addComponent(mChartRefreshProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(start_get_data2DB)
                .addGap(0, 169, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(1, 1, 1)
                            .addComponent(jLabel3)
                            .addGap(18, 18, 18))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addGap(50, 50, 50)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(36, 36, 36)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ClusterNameTextField)
                    .addComponent(ZKHostsTextField)
                    .addComponent(ZKPortTextField)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(mChartRefreshProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(RefreshChartPeriodText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(secLabel1)
                            .addComponent(RefreshPeriodButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(ClusterNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ZKHostsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel3)))
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(ZKPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(RefreshDataPeriodText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secLabel2)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(start_get_data2DB)
                .addContainerGap())
        );

        jSplitPane2.setTopComponent(jPanel2);

        pBackendThreadStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pBackendThreadStatus.setLayout(new java.awt.BorderLayout());
        jSplitPane2.setRightComponent(pBackendThreadStatus);

        settingpanel.add(jSplitPane2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(settingpanel);

        jPanel1.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 802, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /////////////////////////////////////////////////////////////////////////////////
    //   cluster status
    ChartPanel[] mClusterStatusChartssss;
    ClusterStatusPanel mpClusterStatusPanel;
    private String mTableNameRegex = ".*";
    private Integer mClusterStatusRefreshProgress = 0;
    private volatile boolean mBClusterStatusMonitoringTimerTriggered = false;
    private RestartableTimer mClusterStatusMonitoringTimer = new RestartableTimer();

    /**
     * show cluster information: region size of table on each rs
     *
     * @param evt
     */
    private void clusterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clusterActionPerformed
        // show region size of each table for each regionserver, stack chart
        // set other panels invisible
        hideOthers(0);
        mCurrentCurrpanel = CURRPANEL.CLUSTER;
        if (mpClusterStatusPanel == null) {
            mpClusterStatusPanel = new ClusterStatusPanel();
            RegionOfTableOnEachRSServer latestRTRS = RegionOfTableOnEachRSServer.GetLatest();
            // set filter
            Filter filter = new Filter();
            filter.setRegex(mTableNameRegex);
            // get [memsize][store size/number]/table/rs
            mClusterStatusChartssss = RegionOfTableOnEachRSServerCharts.CreateRTRSStackedBarChart(latestRTRS, filter);
            mpClusterStatusPanel.setMemSizeEachTableRSChart(mClusterStatusChartssss[0]);
            mpClusterStatusPanel.setStoreFileEachTableRSChart(mClusterStatusChartssss[1], mClusterStatusChartssss[2]);
            mpClusterStatusPanel.setNumberOfRegionEachTableRsChart(mClusterStatusChartssss[3]);
            pChartpanel.add(mpClusterStatusPanel);
        }
        // show
        mpClusterStatusPanel.setVisible(true);
        // reset status progress bar
        synchronized (mClusterStatusRefreshProgress) {
            mClusterStatusRefreshProgress = 0;
        }
        // trriger timer task
        mClusterStatusMonitoringTimer.schedule(new ClusterStatusMonitorTimerTask(), mChartRefreshPeriod);
        mBClusterStatusMonitoringTimerTriggered = true;

        pChartpanel.revalidate();
        pChartpanel.repaint();

    }//GEN-LAST:event_clusterActionPerformed

    /**
     * for example, when reset table name filter, charts are repainted
     */
    private void rePaintClusterStatus() {
        // show region size of each table for each regionserver, stack chart
        // set other panels invisible
        if (mpClusterStatusPanel != null) {
            hideOthers(0);
            RegionOfTableOnEachRSServer latestRTRS = RegionOfTableOnEachRSServer.GetLatest();
            Filter filter = new Filter();
            filter.setRegex(mTableNameRegex);
            ChartPanel c[] = RegionOfTableOnEachRSServerCharts.CreateRTRSStackedBarChart(latestRTRS, filter);
            for (int i = 0; i < c.length; i++) {
                mClusterStatusChartssss[i].setChart(c[i].getChart());
                mClusterStatusChartssss[i].repaint();
            }
            // show
            mpClusterStatusPanel.setVisible(true);
            mpClusterStatusPanel.repaint();

            pChartpanel.revalidate();
            pChartpanel.repaint();
        }

    }

    // Timer which updates cluster status periodicly
    class ClusterStatusMonitorTimerTask extends TimerTask {

        @Override
        public void run() {
            RegionOfTableOnEachRSServer latestRTRS = RegionOfTableOnEachRSServer.GetLatest();
            // set filter
            Filter filter = new Filter();
            filter.setRegex(mTableNameRegex);
            // reset [memsize][store size/number]/table/rs
            RegionOfTableOnEachRSServerCharts.UpdateRTRSStackedBarChart(mClusterStatusChartssss, latestRTRS, filter);
            mpClusterStatusPanel.repaint();
            // show ...
            pChartpanel.revalidate();
            pChartpanel.repaint();
            // reset status progress
            synchronized (mClusterStatusRefreshProgress) {
                mClusterStatusRefreshProgress = 0;
            }
        }
    }
    ///////////////////////////////////////////////////////////
    //   region status
    private RegionServerStatusPanel mRegionserverStatusPanel = null;
    RestartableTimer mRsStatusMonitoringTimer = new RestartableTimer(); // timer for refresh region server status
    private volatile boolean mBRsStatusMonitoringTimerTriggered = false;
    private Integer mRsStatusRefreshProgress = 0; // status progress for
    ChartPanel mHeapstatusChart;
    ChartPanel mStorestatusChart;
    ChartPanel mNumReguestAndRegionChart;

    /**
     * get latest data from database from time to time
     */
    class RsStatusMonitorTimerTask extends java.util.TimerTask {

        @Override
        public void run() {
            // refresh data from db
            RegionServerStatus serverst = RegionServerStatus.GetLatest();
            // heap status refresh
            RegionServerStatusCharts.updateHeapStatusDataSet(mHeapstatusChart, serverst);
            // store file status refresh
            RegionServerStatusCharts.updateStoreFileStatusChart(mStorestatusChart, serverst);
            // #request and #regions refresh
            RegionServerStatusCharts.updateNumReguestAndRegionDataSet(mNumReguestAndRegionChart, serverst);
            // add more tab refresh HERE
            mRegionserverStatusPanel.repaint();
            // show ...
            pChartpanel.revalidate();
            pChartpanel.repaint();
            // reset status progress
            synchronized (mRsStatusRefreshProgress) {
                mRsStatusRefreshProgress = 0;
            }
        }
    }

    /**
     * show region server status
     *
     * @param evt
     */
    private void rsStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rsStatusActionPerformed
        hideOthers(1);
        mCurrentCurrpanel = CURRPANEL.RS;
        if (mRegionserverStatusPanel == null) {
            mRegionserverStatusPanel = new RegionServerStatusPanel();
            pChartpanel.add(mRegionserverStatusPanel);
            // set each tabs
            RegionServerStatus serverst = RegionServerStatus.GetLatest();
            // latest heap status tab
            if (mHeapstatusChart == null) {
                mHeapstatusChart = RegionServerStatusCharts.createHeapStatusChart(serverst);
                mRegionserverStatusPanel.setHeapSizeChart(mHeapstatusChart);
            }
            // latest store file status tab
            if (mStorestatusChart == null) {
                mStorestatusChart = RegionServerStatusCharts.createStoreFileStatusChart(serverst);
                mRegionserverStatusPanel.setStoreFileStatusChart(mStorestatusChart);
            }
            // latest #request and # regions
            if (mNumReguestAndRegionChart == null) {
                mNumReguestAndRegionChart = RegionServerStatusCharts.createNumReguestAndRegionStatusChart(serverst);
                mRegionserverStatusPanel.setNumRRChart(mNumReguestAndRegionChart);

            }

        }
        mRegionserverStatusPanel.setVisible(true);
        // reset progress
        synchronized (mRsStatusRefreshProgress) {
            mRsStatusRefreshProgress = 0;
        }
        // trigger timer
        mRsStatusMonitoringTimer.schedule(new RsStatusMonitorTimerTask(), mChartRefreshPeriod);
        mBRsStatusMonitoringTimerTriggered = true;

        pChartpanel.revalidate();
        pChartpanel.repaint();
    }//GEN-LAST:event_rsStatusActionPerformed

    ///////////////////////////////////////////////////////////
    /// set filter for filter table name for cluster status
    private void setFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setFilterActionPerformed
        // set filter of table name for %cluster status%
        String str = JOptionPane.showInputDialog(null, "Enter Regex: ",
                "Table Name Regex", 1);
        if (str != null && str.length() != 0) {
            mTableNameRegex = str;
            rePaintClusterStatus();
        } else {
            return;
        }
    }//GEN-LAST:event_setFilterActionPerformed
    ///////////////////////////////////////////////////////////////////
    ///// common: start/stop backend data crawl thread
    private FetchDataWrapper mFetchdataWrapper;
    private String mCluster;
    private String mZKHosts;
    private int mZKPort;
    private int mFetchDataPeriod;

    /**
     * check settings before start start data fetching threads
     *
     * @return
     */
    private boolean checkSettingsForBackendFetchDataThreads() {
        // check data fetch period
        try {
            mFetchDataPeriod = Integer.parseInt(RefreshChartPeriodText.getText());
        } catch (NumberFormatException ne) {
            JOptionPane.showMessageDialog(jPanel1, ne, "Fetch data period of backend threads format wrong!", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        // @todo: cluster name is used to store data to different prefixed tables
        mCluster = ClusterNameTextField.getText();
        if (mCluster == null || mCluster.length() == 0) {
            JOptionPane.showMessageDialog(jPanel1, "Cluster name should not be empty!", "We need a cluster name!",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        mZKHosts = ZKHostsTextField.getText();
        if (mZKHosts == null || mZKHosts.length() == 0) {
            JOptionPane.showMessageDialog(jPanel1, "Zookeeper Hosts should not be empty!", "Zookeeper Hosts should not be empty!",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        try {
            mZKPort = Integer.parseInt(ZKPortTextField.getText());
        } catch (NumberFormatException ne) {
            JOptionPane.showMessageDialog(jPanel1, ne, "Zookeeper Port format wrong!", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;

    }
    /**
     * start backend threads to get data from HBase Admin/log files and store
     * data to database
     *
     * @param evt
     */
    private DynamicTimeseriesChartPanel mDataFetchingStatusChart = null;

    private void createDataFetchingStatusChart() {
        if (mDataFetchingStatusChart != null) {
            return;
        }
        mDataFetchingStatusChart = BackendDataFetchStatusChart.createBackendDataFetchStatusChart();
    }

    private void start_get_data2DBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_start_get_data2DBActionPerformed
        // TODO add your handling code here:
        if (start_get_data2DB.isSelected()) {
            // zk info
            if (!checkSettingsForBackendFetchDataThreads()) {
                return;
            }
            // start get data to database
            mFetchdataWrapper = new FetchDataWrapper();
            mFetchdataWrapper.addFetchRunnable(new FetchAdmindataRunnable(mZKHosts, mZKPort));
            // TODO: add more FtechRunnable here!!!
            mFetchdataWrapper.setPeriod(mFetchDataPeriod);
            mFetchdataWrapper.startAll();
            // show crawl status
            if (mDataFetchingStatusChart == null) {
                createDataFetchingStatusChart();
                pBackendThreadStatus.add(mDataFetchingStatusChart.getChartPanel());
            }
            mDataFetchingStatusChart.designalPause();


        } else {
            // stop  get data to databaese
            if (mFetchdataWrapper == null) {
                start_get_data2DB.setSelected(true);
                return;
            }
            mFetchdataWrapper.stopAll();
            // pause backend status showing
            mDataFetchingStatusChart.signalPause();
        }
    }//GEN-LAST:event_start_get_data2DBActionPerformed
    //////////////////////////////////////////////////////////////////////
    ///// diagnose
    DiagnosePanel mDiagnosePanel = null;

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // adcbe19.machine.wisdom.com,60020,1362770394348
        hideOthers(5);
        mCurrentCurrpanel = CURRPANEL.DIAGNOSE;
        // create a ts for memstore/used heap/total heap size
        if (mDiagnosePanel == null) {
            mDiagnosePanel = DiagnosePanel.createDiagnosePanel();
            // set statuslist
            // set tab 1
            pChartpanel.add(mDiagnosePanel);
        }
        else{
            // update needed
        }
        mDiagnosePanel.setVisible(true);
        // start a timer to update status list
        pChartpanel.revalidate();
        pChartpanel.repaint();
        
    }//GEN-LAST:event_jButton1ActionPerformed
    ///////////////////////////////////////////////////////////////
    //// common: for all panels
    private int mChartRefreshPeriod = 10000; // in ms

    private static enum CURRPANEL {

        CLUSTER,
        RS,
        DIAGNOSE
    }
    CURRPANEL mCurrentCurrpanel;

    private void setRefreshProgress() {
        if (mCurrentCurrpanel == CURRPANEL.CLUSTER) {
            int v = (int) ((mClusterStatusRefreshProgress * onesec) / (float) mChartRefreshPeriod * 100);
            synchronized (mClusterStatusRefreshProgress) {
                mChartRefreshProgressBar.setValue(v);
            }
        } else if (mCurrentCurrpanel == CURRPANEL.RS) {
            int v = (int) ((mRsStatusRefreshProgress * onesec) / (float) mChartRefreshPeriod * 100);
            synchronized (mRsStatusRefreshProgress) {
                mChartRefreshProgressBar.setValue(v);
            }
        }
    }

    /**
     * counter of status refresh progress, if triggered, refresh
     */
    class ChartRefreshProgressTimerTask extends TimerTask {

        @Override
        public void run() {

            if (mBRsStatusMonitoringTimerTriggered) {
                synchronized (mRsStatusRefreshProgress) {
                    mRsStatusRefreshProgress++;
                }
            }
            if (mBClusterStatusMonitoringTimerTriggered) {
                synchronized (mClusterStatusRefreshProgress) {
                    mClusterStatusRefreshProgress++;
                }
            }
            // others added here
            setRefreshProgress();
        }
    }

    /**
     * call when change refresh period from out side
     *
     * @param sec
     */
    public void resetChartRefreshPeroid(int sec) {
        mChartRefreshPeriod = sec * 1000;
        // timer
        if (mBRsStatusMonitoringTimerTriggered) {
            // re schedule
            mRsStatusMonitoringTimer.cancel();
            mRsStatusMonitoringTimer.schedule(new RsStatusMonitorTimerTask(), mChartRefreshPeriod);
            // reset progress
            synchronized (mRsStatusRefreshProgress) {
                mRsStatusRefreshProgress = 0;
            }
        }
    }

    public void hideOthers(int idx) {
        if (idx != 0) {
            // hide cluster status panel
            if (mpClusterStatusPanel != null) {
                mpClusterStatusPanel.setVisible(false);
            }
        }
        if (idx != 1) {
            if (mRegionserverStatusPanel != null) {
                mRegionserverStatusPanel.setVisible(false);
            }
        }
        if (idx != 5) {
            if (mDiagnosePanel != null) {
                mDiagnosePanel.setVisible(false);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HBaseMonitoringApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HBaseMonitoringApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HBaseMonitoringApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HBaseMonitoringApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HBaseMonitoringApp().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ClusterNameTextField;
    private javax.swing.JTextField RefreshChartPeriodText;
    private javax.swing.JTextField RefreshDataPeriodText;
    private javax.swing.JButton RefreshPeriodButton;
    private javax.swing.JTextField ZKHostsTextField;
    private javax.swing.JTextField ZKPortTextField;
    private javax.swing.JButton cluster;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JProgressBar mChartRefreshProgressBar;
    private javax.swing.JPanel pBackendThreadStatus;
    private javax.swing.JPanel pChartpanel;
    private javax.swing.JButton regions;
    private javax.swing.JButton rsStatus;
    private javax.swing.JLabel secLabel1;
    private javax.swing.JLabel secLabel2;
    private javax.swing.JButton setFilter;
    private javax.swing.JPanel settingpanel;
    private javax.swing.JToggleButton start_get_data2DB;
    private javax.swing.JButton tables;
    // End of variables declaration//GEN-END:variables
}
